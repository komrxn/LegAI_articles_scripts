import os
import re
import requests
import subprocess
import shutil
from bs4 import BeautifulSoup
from datetime import datetime

# –°–ª–æ–≤–∞—Ä—å –∫–æ–¥–µ–∫—Å–æ–≤ –∏ –∏—Ö URL –Ω–∞ lex.uz
codes = {
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å p1": "https://lex.uz/ru/docs/111181",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å p2": "https://lex.uz/ru/docs/180550",
    "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/111457",
    "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/104723",
    "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/6257291",
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/97661",
    "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/2304140",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/3517334",
    "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è": "https://lex.uz/docs/35869",
    "–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/163627",
    "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/2876352",
    "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/3523895",
    "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/106134",
    "–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/149947",
    "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å": "https://lex.uz/ru/docs/4674893",
    "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º —Å—É–¥–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ": "https://lex.uz/ru/docs/3527365"
}

# –ù–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
names_en = {
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å p1": "Civil Code Part1",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å p2": "Civil Code Part2",
    "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Criminal Code",
    "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Family Code",
    "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å": "Labor Code",
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Administrative Code",
    "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Budget Code",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Civil Procedure Code",
    "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è": "Constitution",
    "–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Criminal-Executive Code",
    "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Customs Code",
    "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Economic Procedure Code",
    "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Housing Code",
    "–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å": "Land Code",
    "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å": "Tax Code",
    "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º —Å—É–¥–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ": "Administrative Court Procedure Code"
}

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç –∏ –∑–∞–º–µ—Ç–æ–∫
date_pattern = re.compile(r"\b\d{2}\.\d{2}\.\d{4}\b")
green_phrases = [
    "–∏–º–µ–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ü–∏—è, –Ω–µ –≤—Å—Ç—É–ø–∏–≤—à–∞—è –≤ —Å–∏–ª—É",
    "–≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É",
    "–≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å"
]
red_phrases = [
    "–≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
    "–∞–∫—Ç –∏–∑–ª–æ–∂–µ–Ω –≤ –Ω–æ–≤–æ–π —Ä–µ–¥–∞–∫—Ü–∏–∏",
    "—É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É"
]

# –ü–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
doc_dir = os.path.join('data', 'doc')
docx_dir = os.path.join('data', 'docx')
os.makedirs(doc_dir, exist_ok=True)
os.makedirs(docx_dir, exist_ok=True)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–∞ macOS –∏ Linux
converter = (
    shutil.which('libreoffice') or
    shutil.which('soffice') or
    shutil.which('unoconv') or
    '/Applications/LibreOffice.app/Contents/MacOS/soffice'
)
if converter and os.path.exists(converter):
    tool_name = os.path.basename(converter)
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä: {tool_name}\n")
else:
    converter = None
    print("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä .doc -> .docx –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n")

print("üìò –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–µ–∫—Å–æ–≤ —Å lex.uz\n")

for title, url in codes.items():
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞: {title}")
    try:
        # –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
        r = requests.get(url)
        r.raise_for_status()
        soup = BeautifulSoup(r.content, 'html.parser')
        text_lower = soup.get_text(separator=' ').lower()

        # –ü–æ–∏—Å–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        dates = date_pattern.findall(text_lower)
        parsed = [datetime.strptime(d, '%d.%m.%Y') for d in dates]
        latest = max(parsed).strftime('%d.%m.%Y') if parsed else 'unknown_date'

        # –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        green_note = next((p for p in green_phrases if p in text_lower), None)
        red_note = next((p for p in red_phrases if p in text_lower), None)
        print(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {latest}")
        if green_note:
            print(f"üü© –ó–∞–º–µ—Ç–∫–∞: {green_note}")
        if red_note:
            print(f"üü• –ó–∞–º–µ—Ç–∫–∞: {red_note}")
        if not (green_note or red_note):
            print("‚ÑπÔ∏è –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç")

        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ .doc –∏ –ª–æ–≥
        doc_url = f"{url}?type=doc"
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å: {doc_url}")

        # –°–∫–∞—á–∏–≤–∞–µ–º .doc —Ñ–∞–π–ª
        slug = re.sub(r'[^0-9a-zA-Z–∞-—è–ê-–Ø]+', '_', title).strip('_')
        doc_path = os.path.join(doc_dir, f"{slug}.doc")
        with requests.get(doc_url, stream=True) as r_doc:
            r_doc.raise_for_status()
            with open(doc_path, 'wb') as f:
                for chunk in r_doc.iter_content(8192):
                    f.write(chunk)
        print(f"‚úÖ –°–∫–∞—á–∞–Ω .doc: {doc_path}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ .docx
        if converter:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ docx
                cmd = ([converter, '--headless', '--convert-to', 'docx', '--outdir', docx_dir, doc_path]
                       if tool_name.lower() != 'unoconv'
                       else [converter, '-f', 'docx', '-o', docx_dir, doc_path])
                subprocess.run(cmd, check=True)

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è + –¥–∞—Ç—É
                en_name = names_en.get(title, slug)
                new_filename = f"{en_name} {latest}.docx"
                old_docx = os.path.join(docx_dir, f"{slug}.docx")
                new_path = os.path.join(docx_dir, new_filename)
                os.replace(old_docx, new_path)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω .docx: {new_path}\n")
            except Exception as conv_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {title}: {conv_err}\n")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è {title}\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {title}: {e}\n")

    print('-' * 40)
